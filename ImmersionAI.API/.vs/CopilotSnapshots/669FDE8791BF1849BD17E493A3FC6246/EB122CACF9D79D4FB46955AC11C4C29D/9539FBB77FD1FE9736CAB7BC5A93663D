using ImmersionAI.API.api.Models;
using ImmersionAI.API.api.Services; // For InstructionPayloadEntity
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Reflection.Emit;

namespace ImmersionAI.API.api.Data
{
    public class ImmersionDbContext : DbContext
    {
        public ImmersionDbContext(DbContextOptions<ImmersionDbContext> options)
            : base(options)
        {
        }

        // Your entity tables
        public DbSet<User> Users { get; set; }
        public DbSet<YourEntity> YourEntities { get; set; }
        public DbSet<ChatTurn> ChatTurns { get; set; }
        public DbSet<InstructionPayloadEntity> InstructionPayloads { get; set; } // Add persistent context

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Example: make Email unique
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();

            // Configure YourEntity table name
            modelBuilder.Entity<YourEntity>()
                .ToTable("YourEntities");

            // Configure ChatTurn table
            modelBuilder.Entity<ChatTurn>(entity =>
            {
                entity.ToTable("ChatTurns");
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Message).IsRequired();
                entity.Property(e => e.Origin).IsRequired();
                entity.Property(e => e.Timestamp).IsRequired();
                entity.Property(e => e.UserId).IsRequired();
                entity.Property(e => e.SessionId).IsRequired(); // Ensure SessionId is required
            });

            // Configure InstructionPayloadEntity table
            modelBuilder.Entity<InstructionPayloadEntity>(entity =>
            {
                entity.ToTable("InstructionPayloads");
                entity.HasKey(e => e.Id);
                entity.Property(e => e.UserId).IsRequired();
                entity.Property(e => e.SessionId).IsRequired();
                entity.Property(e => e.PayloadJson).IsRequired();
                entity.Property(e => e.CreatedAt).IsRequired();
            });
        }
    }
}
