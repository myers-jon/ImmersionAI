using ImmersionAI.API.api.Data;
using ImmersionAI.API.api.Models;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace ImmersionAI.API.api.Services
{
    public class PromptBuilder
    {
        private readonly ImmersionDbContext _db;
        private readonly string _staticPrompt;

        public PromptBuilder(ImmersionDbContext db)
        {
            _db = db;
            _staticPrompt = File.ReadAllText("SystemPrompt.txt");
        }

        public async Task<string> BuildAsync(Guid userId, Guid sessionId, string userMessage)
        {
            // 1. Load latest InstructionPayload JSON (adapt this to your actual context storage)
            var payloadEntity = await _db.Set<InstructionPayloadEntity>()
                .Where(c => c.UserId == userId && c.SessionId == sessionId)
                .OrderByDescending(c => c.CreatedAt)
                .FirstOrDefaultAsync();

            var payloadJson = payloadEntity?.PayloadJson
                ?? JsonConvert.SerializeObject(new InstructionPayload());

            // 2. Load last 10 chat turns
            var turns = await _db.ChatTurns
                .Where(c => c.UserId == userId && c.SessionId == sessionId)
                .OrderBy(c => c.Timestamp)
                .Take(10)
                .ToListAsync();

            // 3. Assemble the prompt
            return $@"{_staticPrompt}

InstructionPayload:
{payloadJson}

ConversationHistory:
{JsonConvert.SerializeObject(turns, Formatting.Indented)}

User: {userMessage}

Assistant:";
        }
    }

    // Example entity for context storage (adapt as needed)
    public class InstructionPayloadEntity
    {
        public Guid Id { get; set; }
        public Guid UserId { get; set; }
        public Guid SessionId { get; set; }
        public string PayloadJson { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
// Note: Ensure you have the necessary using directives for your DbContext and models.
